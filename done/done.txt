1. Theorem: dlst(x) => (If(x == nil, ret == nil, ret == nxt(x)) => lst(ret))
   Lemma: dlst(x) => lst(x)

2. Theorem: slst(x) => (If(x == nil, ret == nil, ret == nxt(x)) => lst(ret))
   Lemma: slst(x) => lst(x)

3. Theorem: sdlst(x) => (If(x == nil, ret == nil, ret == nxt(x)) => dlst(ret))
   Lemma: sdlst(x) => dlst(x)

4. Theorem: sdlst(x) => (If(x == nil, ret == nil, ret == nxt(x)) => dlst(ret) /\ slst(ret))
   Lemmas: sdlst(x) => dlst(x)
           sdlst(x) => slst(x)

5. {v1 = v2}
   while (v1 != nil) do
     v1 := n(v1);
     if (v2 != c) {v2 := n(v2)}
   endwhile
   {v2 = nil \/ v2 = c}
   Lemma: reach(x) => v2(x) == v1(x) \/ v2(x) == c)

6. Theorem: listlen(x, l) => (If(l == 1, ret == x, ret == nxt(x)), list(x))
   Lemmas: listlen(x, l) => list(nil) -- not needed
           listlen(x, l) => list(x)


